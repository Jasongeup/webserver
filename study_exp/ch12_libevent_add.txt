#include<event.h>
static inline int event_add_internal(struct event *ev, const struct timeval *tv, int tv_is_absolute) {
    struct event_base *base = ev->ev_base;
    int res = 0;
    int notify = 0;
    EVENT_BASE_ASSERT_LOCKED(base);
    _event_debug_assert_is_setup(ev);
    event_debug(("event_add: event:%p(fd%d), %s%s%s call%p", ev, (int)ev->ev_fd,
                 ev->ev_events & EV_READ ? "EV_READ" : "",
                 ev->ev_events & EV_WRITE ? "EV_WRITE" : "",
                 tv ? "EV_TIMEOUT" : "", ev->ev_callback));
    EVUTIL_ASSERT(!(ev->ev_flags & ~EVLIST_ALL));

    /* 如果新添加的事件处理器是定时器，且它尚未被添加到通用定时器队列或时间堆中，
       则为该定时器在时间堆上预留一个位置 */
    if (tv != NULL && !(ev->ev_flags & EVLIST_TIMEOUT)) {
        if (min_heap_reserve(&base->timeheap, 1 + min_heap_size(&base->timeheap)) == -1)
            return (-1);
    }

    /*如果当前调用者不是主线程（执行事件循环的线程），并且被添加的事件处理器是信
号事件处理器，而且主线程正在执行该信号事件处理器的回调函数，则当前调用者必须等待
主线程完成调用，否则将引起竞态条件（考虑event结构体的ev_ncalls和ev_pncalls成
员）*/
#ifndef _EVENT_DISABLE_THREAD_SUPPORT
    if (base->current_event == ev && (ev->ev_events & EV_SIGNAL) && !EVBASE_IN_THREAD(base)) {
        ++base->current_event_waiters;
        EVTHREAD_COND_WAIT(base->current_event_cond, base->th_base_lock);
    }
#endif

    if ((ev->ev_events & (EV_READ | EV_WRITE | EV_SIGNAL)) && !(ev->ev_flags & (EVLIST_INSERTED | EVLIST_ACTIVE))) {
        if (ev->ev_events & (EV_READ | EV_WRITE))
            /* 添加 I/O 事件和 I/O 事件处理器的映射关系 */
            res = evmap_io_add(base, ev->ev_fd, ev);
        else if (ev->ev_events & EV_SIGNAL)
            /* 添加信号事件和信号事件处理器的映射关系 */
            res = evmap_signal_add(base, (int)ev->ev_fd, ev);

        if (res != -1)
            /* 将事件处理器插入注册事件队列 */
            event_queue_insert(base, ev, EVLIST_INSERTED);

        if (res == 1) {
            /* 事件多路分发器中添加了新的事件，所以要通知主线程 */
            notify = 1;
            res = 0;
        }
    }

    /*下面将事件处理器添加至通用定时器队列或时间堆中。对于信号事件处理器和I/O事
件处理器，根据evmap_*_add函数的结果决定是否添加（这是为了给事件设置超时）；而对
于定时器，则始终应该添加之*/
    if (res != -1 && tv != NULL) {
        struct timeval now;
        int common_timeout;

        /*对于永久性事件处理器，如果其超时时间不是绝对时间，则将该事件处理器的超时时
间记录在变量ev-＞ev_io_timeout中。ev_io_timeout是定义在event-internal.h
文件中的宏：#define ev_io_timeout_ev.ev_io.ev_timeout*/
        if (ev->ev_closure == EV_CLOSURE_PERSIST && !tv_is_absolute)
            ev->ev_io_timeout = *tv;

        /*如果该事件处理器已经被插入通用定时器队列或时间堆中，则先删除它*/
        if (ev->ev_flags & EVLIST_TIMEOUT) {
            if (min_heap_elt_is_top(ev))
                notify = 1;
            event_queue_remove(base, ev, EVLIST_TIMEOUT);
        }

        /*如果待添加的事件处理器已经被激活，且原因是超时，则从活动事件队列中删除它，
以避免其回调函数被执行。对于信号事件处理器，必要时还需将其ncalls成员设置为0（注
意，ev_pncalls如果不为NULL，它指向ncalls）。前面提到，信号事件被触发时，
ncalls指定其回调函数被执行的次数。将ncalls设置为0，可以干净地终止信号事件的处
理*/
        if ((ev->ev_flags & EVLIST_ACTIVE) && (ev->ev_res & EV_TIMEOUT)) {
            if (ev->ev_events & EV_SIGNAL) {
                if (ev->ev_ncalls && ev->ev_pncalls) {
                    *ev->ev_pncalls = 0;
                }
            }
            event_queue_remove(base, ev, EVLIST_ACTIVE);
        }

        gettime(base, &now);
        common_timeout = is_common_timeout(tv, base);

        if (tv_is_absolute) {
            ev->ev_timeout = *tv;
        /*判断应该将定时器插入通用定时器队列，还是插入时间堆*/
        } else if (common_timeout) {
            struct timeval tmp = *tv;
            tmp.tv_usec &= MICROSECONDS_MASK;
            evutil_timeradd(&now, &tmp, &ev->ev_timeout);
            ev->ev_timeout.tv_usec |= (tv->tv_usec & ~MICROSECONDS_MASK);
        } else {
            /*加上当前系统时间，以取得定时器超时的绝对时间*/
            evutil_timeradd(&now, tv, &ev->ev_timeout);
        }

        event_debug(("event_add: timeout in %d seconds, call %p", (int)tv->tv_sec, ev->ev_callback));
        event_queue_insert(base, ev, EVLIST_TIMEOUT);
        /*如果被插入的事件处理器是通用定时器队列中的第一个元素，则通过调用
common_timeout_schedule函数将其转移到时间堆中。这样，通用定时器链表和时间堆
中的定时器就得到了统一的处理*/
        if (common_timeout) {
            struct common_timeout_list *ctl = get_common_timeout_list(base, &ev->ev_timeout);
            if (ev == TAILQ_FIRST(&ctl->events)) {
                common_timeout_schedule(ctl, &now, ev);
            }
        } else {
            if (min_heap_elt_is_top(ev))
                notify = 1;
        }
    }

    /* 如果必要，唤醒主线程 */
    if (res != -1 && notify && EVBASE_NEED_NOTIFY(base))
        evthread_notify_base(base);

    _event_debug_note_add(ev);
    return (res);
}
